1
00:00:00,210 --> 00:00:06,090
So now let's try a fast forward merge which just to recap from 2 minutes ago at the end of the last

2
00:00:06,090 --> 00:00:09,390
video, a fast forward merge is a special case of a merge.

3
00:00:09,390 --> 00:00:11,820
It's a simpler merge to perform.

4
00:00:12,240 --> 00:00:18,780
The commands are the same, but from gets perspective it's really easy because all it has to do is move

5
00:00:18,780 --> 00:00:25,500
a pointer up some number of commits to catch up or to fast forward to some particular destination commit.

6
00:00:25,500 --> 00:00:31,560
So in these diagrams we're fast forwarding master two commits if we merge the bug fixed branch into

7
00:00:31,560 --> 00:00:32,220
master.

8
00:00:32,520 --> 00:00:33,810
So that's what we're going to practice.

9
00:00:33,810 --> 00:00:34,980
We're going to try this out.

10
00:00:34,980 --> 00:00:39,300
Remember that this is a special case of a merge, not all merge this work this way.

11
00:00:39,300 --> 00:00:41,400
And also remember the steps.

12
00:00:41,400 --> 00:00:46,260
The first step is to switch to the destination branch we're merging into.

13
00:00:46,590 --> 00:00:51,180
So back here, if we go with these diagrams, we need to switch over to master.

14
00:00:51,210 --> 00:00:57,930
If we weren't on master already, assuming we want to merge these commits into master, then all we

15
00:00:57,930 --> 00:01:04,860
do is run, get, merge, and then some branch we want to merge into master and then in this case that

16
00:01:04,860 --> 00:01:08,010
will make master catch up on those commits from bug fix.

17
00:01:08,010 --> 00:01:13,500
In other situations, we might have some additional work to do in the event that there's additional

18
00:01:13,500 --> 00:01:18,000
commits on master that don't exist on bug fix or there's conflicting information.

19
00:01:18,000 --> 00:01:20,940
That is what we'll talk about in the next couple of videos.

20
00:01:20,940 --> 00:01:23,550
But for now we're just going to practice with a fast forward merge.

21
00:01:23,550 --> 00:01:27,600
So switch to the branch and then merge some other branch in OC.

22
00:01:27,630 --> 00:01:28,680
So let's try it out.

23
00:01:28,800 --> 00:01:34,530
So over here on our playlist example we have well quite a few branches.

24
00:01:34,860 --> 00:01:40,620
I haven't shown this, but if we use Dash Vee, we get a little bit more information, we get the last

25
00:01:40,620 --> 00:01:45,360
commits, the tip of the branch and the commit message alongside the branch name.

26
00:01:45,900 --> 00:01:48,600
So we started off with our master branch.

27
00:01:48,600 --> 00:01:49,920
It's very simple, right?

28
00:01:49,920 --> 00:01:53,700
If I switch to it, it just has these two AB songs.

29
00:01:54,120 --> 00:01:55,590
We look at git log.

30
00:01:55,800 --> 00:01:57,420
We have two commits there.

31
00:01:58,080 --> 00:02:01,860
And then we have our oldest branch, which I think I'm going to merge into master.

32
00:02:01,860 --> 00:02:03,810
So let me take a look at oldies.

33
00:02:05,200 --> 00:02:07,240
So it has some additional content.

34
00:02:07,240 --> 00:02:13,960
But if we look at git log, it just has the first two commits from master and then it has what, three

35
00:02:13,960 --> 00:02:15,340
more commits on top?

36
00:02:15,760 --> 00:02:21,880
But nothing has happened to the master branch since we split off, since we created this oldest branch.

37
00:02:21,880 --> 00:02:25,750
So this is an example of what would be a fast forward merge.

38
00:02:26,080 --> 00:02:28,900
Just to be clear here, I'm using this distinction.

39
00:02:28,900 --> 00:02:34,360
I'm calling it a fast forward merge, but the commands you use are still just get merged and I'll show

40
00:02:34,360 --> 00:02:35,530
you a merge in the next video.

41
00:02:35,530 --> 00:02:37,000
That is not a fast forward.

42
00:02:37,000 --> 00:02:38,140
It behaves the same way.

43
00:02:38,140 --> 00:02:39,400
We use the same commands.

44
00:02:39,400 --> 00:02:44,140
You'll just see there's an extra hurdle along the way potentially.

45
00:02:44,140 --> 00:02:51,490
Anyway, I want to merge my oldest branch into master so I can get all of this stuff in my master branch.

46
00:02:51,610 --> 00:02:55,570
So we'll go to master, get switch master.

47
00:02:55,570 --> 00:02:56,710
That's the first step.

48
00:02:58,000 --> 00:02:59,530
Once again, I do get log.

49
00:02:59,530 --> 00:03:01,240
We only have two commits.

50
00:03:01,480 --> 00:03:03,130
This is where master leaves off.

51
00:03:03,130 --> 00:03:04,810
This is all that it has.

52
00:03:05,080 --> 00:03:11,590
But now I'm going to run, get merge and then the name of the branch I want to merge in to master.

53
00:03:11,590 --> 00:03:13,030
I'm currently on master.

54
00:03:13,030 --> 00:03:15,700
I want to merge the commit from oldest.

55
00:03:16,840 --> 00:03:18,100
And what did we see?

56
00:03:18,130 --> 00:03:23,980
It says fast forward right there and it tells me one file change, seven insertions, one deletion.

57
00:03:24,010 --> 00:03:26,650
Let's take a look at our playlist file now.

58
00:03:27,310 --> 00:03:27,960
Cool.

59
00:03:27,970 --> 00:03:30,760
We can see that all of this stuff was added in.

60
00:03:30,940 --> 00:03:37,780
And more importantly, if we look at git log, we see that we had the first commits that we always had

61
00:03:37,780 --> 00:03:43,780
on this branch, but now we have these other commits that came from the oldest branch, the George Jones

62
00:03:43,780 --> 00:03:46,870
commit, George Harrison Commit and the Van Morrison commit.

63
00:03:47,110 --> 00:03:49,950
And that is our first successful merge.

64
00:03:49,960 --> 00:03:53,920
We merge the content that commits from oldest on to master.

65
00:03:53,950 --> 00:03:57,560
Now a very important note is that we still have the oldest branch.

66
00:03:57,580 --> 00:04:00,450
It doesn't delete that branch, it's still there.

67
00:04:00,460 --> 00:04:05,560
So I could go back to oldies and do something new and it would not exist on Master.

68
00:04:05,710 --> 00:04:07,570
So they're not forever in sync.

69
00:04:07,600 --> 00:04:13,030
This is one moment where everything from oldest was added on to master, but that doesn't mean that

70
00:04:13,030 --> 00:04:15,790
they're the same and that they'll stay the same if they are.

71
00:04:15,830 --> 00:04:18,790
They're still separate branches and I can do separate work.

72
00:04:18,820 --> 00:04:24,730
They are distinct contexts, but right now the commits from oldest were merged in to master and that's

73
00:04:24,730 --> 00:04:30,520
an example of a fast forward merge where the master branch in our case had to catch up on commits from

74
00:04:30,520 --> 00:04:31,630
a merged branch.

